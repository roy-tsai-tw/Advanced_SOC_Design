// This code snippet was auto generated by xls2vlog.py from source file: ./user_project_wrapper.xlsx
// User: josh
// Date: Sep-22-23



module USER_PRJ1 #( parameter pUSER_PROJECT_SIDEBAND_WIDTH   = 5,
					parameter pADDR_WIDTH   = 12,
                    parameter pDATA_WIDTH   = 32
                 )
(
  output wire                        awready,
  output wire                        arready,
  output wire                        wready,
  output wire                        rvalid,
  output wire  [(pDATA_WIDTH-1) : 0] rdata,
  input  wire                        awvalid,
  input  wire                [11: 0] awaddr,
  input  wire                        arvalid,
  input  wire                [11: 0] araddr,
  input  wire                        wvalid,
  input  wire                 [3: 0] wstrb,
  input  wire  [(pDATA_WIDTH-1) : 0] wdata,
  input  wire                        rready,
  input  wire                        ss_tvalid,
  input  wire  [(pDATA_WIDTH-1) : 0] ss_tdata,
  input  wire                 [1: 0] ss_tuser,
    `ifdef USER_PROJECT_SIDEBAND_SUPPORT
  input  wire                 [pUSER_PROJECT_SIDEBAND_WIDTH-1: 0] ss_tupsb,
  `endif
  input  wire                 [3: 0] ss_tstrb,
  input  wire                 [3: 0] ss_tkeep,
  input  wire                        ss_tlast,
  input  wire                        sm_tready,
  output wire                        ss_tready,
  output wire                        sm_tvalid,
  output wire  [(pDATA_WIDTH-1) : 0] sm_tdata,
  output wire                 [2: 0] sm_tid,
  `ifdef USER_PROJECT_SIDEBAND_SUPPORT
  output  wire                 [pUSER_PROJECT_SIDEBAND_WIDTH-1: 0] sm_tupsb,
  `endif
  output wire                 [3: 0] sm_tstrb,
  output wire                 [3: 0] sm_tkeep,
  output wire                        sm_tlast,
  output wire                        low__pri_irq,
  output wire                        High_pri_req,
  output wire                [23: 0] la_data_o,
  input  wire                        axi_clk,
  input  wire                        axis_clk,
  input  wire                        axi_reset_n,
  input  wire                        axis_rst_n,
  input  wire                        user_clock2,
  input  wire                        uck2_rst_n
);

// tap RAM
wire                     tap_WE_merge;
wire                     tap_RE;
wire [(pDATA_WIDTH-1):0] tap_Di;
wire [(pADDR_WIDTH-1):0] tap_A_shifted;
wire [(pDATA_WIDTH-1):0] tap_Do;

// data RAM
wire                     data_WE_merge;
wire                     data_RE;
wire [(pDATA_WIDTH-1):0] data_Di;
wire [(pADDR_WIDTH-1):0] data_A_shifted;
wire [(pDATA_WIDTH-1):0] data_Do;



//assign awready       = 1'b0;
//assign arready       = 1'b0;
//assign wready        = 1'b0;
//assign rvalid        = 1'b0;
//assign rdata         = {pDATA_WIDTH{1'b0}};
//assign ss_tready     = 1'b0;
//assign sm_tvalid     = 1'b0;
//assign sm_tdata      = {pDATA_WIDTH{1'b0}};
assign sm_tid        = 3'b0;
//`ifdef USER_PROJECT_SIDEBAND_SUPPORT
//  assign sm_tupsb      = 5'b0;
//`endif
//assign sm_tstrb      = 4'b0;
//assign sm_tkeep      = 1'b0;
//assign sm_tlast      = 1'b0;
assign low__pri_irq  = 1'b0;
assign High_pri_req  = 1'b0;
assign la_data_o     = 24'b0;

    // write your code here!

`ifdef USER_PROJECT_SIDEBAND_SUPPORT
	reg [pUSER_PROJECT_SIDEBAND_WIDTH-1: 0] sm_tupsb_reg;
`endif
reg [3: 0] sm_tstrb_reg;
reg [3: 0] sm_tkeep_reg;

`ifdef USER_PROJECT_SIDEBAND_SUPPORT
  always@(posedge axis_clk or negedge axis_rst_n) begin
	if(~axis_rst_n)
		sm_tupsb_reg <= 5'b0;
	else if(ss_tvalid & ss_tready)
		sm_tupsb_reg <= sm_tupsb;
	else
		sm_tupsb_reg <= sm_tupsb_reg;
  end
`endif

always@(posedge axis_clk or negedge axis_rst_n) begin
	if(~axis_rst_n)
		sm_tstrb_reg <= 5'b0;
	else if(ss_tvalid & ss_tready)
		sm_tstrb_reg <= sm_tstrb;
	else
		sm_tstrb_reg <= sm_tstrb_reg;
end

always@(posedge axis_clk or negedge axis_rst_n) begin
	if(~axis_rst_n)
		sm_tkeep_reg <= 5'b0;
	else if(ss_tvalid & ss_tready)
		sm_tkeep_reg <= sm_tkeep;
	else
		sm_tkeep_reg <= sm_tkeep_reg;
end



fir #(.pADDR_WIDTH(12), .pDATA_WIDTH(32), .Tape_Num(11)) U_fir(
    // Added by me: Coefficient in & ap_start/ap_done/ap_idle (AXI-Lite)
    .awready        (awready			), //O
    .wready			(wready				), //O
    .awvalid		(awvalid			), //I
    .awaddr			(awaddr				), //I
    .wvalid			(wvalid				), //I
    .wdata			(wdata				), //I
    .arready		(arready			), //O
    .rready			(rready				), //I
    .arvalid		(arvalid			), //I
    .araddr			(araddr				), //I
    .rvalid			(rvalid				), //O
    .rdata			(rdata				), //O
    // Added by me: Data in (AXI-Stream)
    .ss_tvalid		(ss_tvalid			), //I
    .ss_tdata		(ss_tdata			), //I
    .ss_tlast		(ss_tlast			), //I
    .ss_tready		(ss_tready			), //O
    // Added by me: Data out (AXI-Stream)
    .sm_tready		(sm_tready			), //I
    .sm_tvalid		(sm_tvalid			), //O
    .sm_tdata		(sm_tdata			), //O
    .sm_tlast		(sm_tlast			), //O
						
    // bram for tap RAM
    //tap_WE,					
    //tap_EN,					
    .tap_WE_merge	(tap_WE_merge		), //O
    .tap_RE			(tap_RE				), //O
    .tap_Di			(tap_Di				), //O
    //tap_A,					
    .tap_A_shifted	(tap_A_shifted		), //O
    .tap_Do			(tap_Do				), //I
					
    // bram for data RAM
    //data_WE,					
    //data_EN,					
    .data_WE_merge	(data_WE_merge		), //O
    .data_RE		(data_RE			), //O
    .data_Di		(data_Di			), //O
    //data_A,					
    .data_A_shifted (data_A_shifted		), //O
    .data_Do		(data_Do			), //I
					
    .axis_clk		(axi_clk			), //I
    .axis_rst_n		(axi_reset_n		)  //I
);
// bram for tap RAM
bram11 tap_RAM (
	.clk(axis_clk),
	.we(tap_WE_merge),
	.re(tap_RE),
	.waddr(tap_A_shifted),
	.raddr(tap_A_shifted),
	.wdi(tap_Di),
	.rdo(tap_Do)
);

// bram for data RAM
bram11 data_RAM(
.clk(axis_clk),
	.we(data_WE_merge),
	.re(data_RE),
	.waddr(data_A_shifted),
	.raddr(data_A_shifted),
	.wdi(data_Di),
	.rdo(data_Do)
);


endmodule // USER_PRJ1
